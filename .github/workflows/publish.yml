name: Publish to npm and Create Release

permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changes: ${{ steps.changes.outputs.changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get commit messages since last tag
        id: changes
        run: |
          # Get the last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$last_tag" ]; then
            # If no tags exist, get all commits
            changes=$(git log --oneline --pretty=format:"- %s" HEAD)
          else
            # Get commits since last tag
            changes=$(git log --oneline --pretty=format:"- %s" ${last_tag}..HEAD)
          fi
          
          # Save changes to output, handling multiline
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump-type
        run: |
          # Get commit messages since last tag
          last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$last_tag" ]; then
            commits=$(git log --oneline --pretty=format:"%s" HEAD)
          else
            commits=$(git log --oneline --pretty=format:"%s" ${last_tag}..HEAD)
          fi
          
          # Check for MAJOR: prefix
          if echo "$commits" | grep -q "^MAJOR:"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          # Check for MINOR: prefix
          elif echo "$commits" | grep -q "^MINOR:"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          # Default to patch for all other commit types
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: version
        run: |
          # Bump version based on commit type
          new_version=$(npm version ${{ steps.bump-type.outputs.bump_type }} --no-git-tag-version)
          echo "version=${new_version}" >> $GITHUB_OUTPUT

      - name: Commit version change
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push origin main

      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag
        run: |
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Create GitHub Release
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "Release ${{ steps.version.outputs.version }}"
          body: |
            Auto-generated release for version ${{ steps.version.outputs.version }}
            
            ## Changes:
            
            ${{ steps.changes.outputs.changes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
